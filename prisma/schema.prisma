// Docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------------------------- Enums --------------------------------- */

enum Role {
  user
  admin
}

enum AuthProviderType {
  google
  facebook
}

enum SocialConnectionType {
  twitch
  facebook
}

// --------------------------------  Models ------------------------------- */

model User {
  id                String             @id @default(uuid()) @db.Uuid
  name              String
  email             String?            @unique
  password          String?
  dateCreated       DateTime           @default(now())
  role              Role               @default(user)
  profileImage      String?
  authProviders     AuthProvider[]
  socialConnections SocialConnection[]
  PopupWidgets      PopupWidget[]
}

model AuthProvider {
  id        String           @id @unique
  provider  AuthProviderType
  userId    String           @db.Uuid
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SocialConnection {
  id           String               @id @default(uuid()) @db.Uuid
  userId       String               @db.Uuid
  provider     SocialConnectionType
  accessToken  String
  refreshToken String
  expiresAt    DateTime
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  User         User                 @relation(fields: [userId], references: [id])
  PopupWidgets PopupWidget[]
}

model PopupWidget {
  id                 String             @id @default(uuid()) @db.Uuid
  name               String?
  domain             String[]
  apiKey             String             @unique
  socialConnectionId String             @db.Uuid
  SocialConnection   SocialConnection   @relation(fields: [socialConnectionId], references: [id])
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  PopupWidgetAssets  PopupWidgetAsset[]
  userId             String             @db.Uuid
  User               User               @relation(fields: [userId], references: [id])
}

model PopupWidgetAsset {
  id            String      @id @default(uuid()) @db.Uuid
  content       Json
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  popupWidgetId String      @db.Uuid
  PopupWidget   PopupWidget @relation(fields: [popupWidgetId], references: [id])
}
